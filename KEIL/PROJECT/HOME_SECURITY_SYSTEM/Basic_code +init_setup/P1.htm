<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [C:\laptop\HSSD\Vector\ARM(from_lab_23.03.24(20.05))\KEIL\PROJECT\HOME_SECURITY_SYSTEM\Basic_code +init_setup\P1.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image C:\laptop\HSSD\Vector\ARM(from_lab_23.03.24(20.05))\KEIL\PROJECT\HOME_SECURITY_SYSTEM\Basic_code +init_setup\P1.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, RVCT4.0 [Build 524]: Last Updated: Sun Mar 24 22:32:03 2024
<BR><P>
<H3>Maximum Stack Usage =        144 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; INIT_SETUP &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[2565568]">Reset_Handler</a>
 <LI><a href="#[25655a4]">__user_initial_stackheap</a>
 <LI><a href="#[25657c0]">Undef_Handler</a>
 <LI><a href="#[2565784]">SWI_Handler</a>
 <LI><a href="#[2565748]">PAbt_Handler</a>
 <LI><a href="#[256570c]">DAbt_Handler</a>
 <LI><a href="#[25656d0]">IRQ_Handler</a>
 <LI><a href="#[2565694]">FIQ_Handler</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[25657c0]">Undef_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[25657c0]">Undef_Handler</a><BR>
 <LI><a href="#[2565784]">SWI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2565784]">SWI_Handler</a><BR>
 <LI><a href="#[2565748]">PAbt_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2565748]">PAbt_Handler</a><BR>
 <LI><a href="#[256570c]">DAbt_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[256570c]">DAbt_Handler</a><BR>
 <LI><a href="#[25656d0]">IRQ_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[25656d0]">IRQ_Handler</a><BR>
 <LI><a href="#[2565694]">FIQ_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2565694]">FIQ_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[2565568]">Reset_Handler</a>
 <LI><a href="#[25657c0]">Undef_Handler</a>
 <LI><a href="#[2565784]">SWI_Handler</a>
 <LI><a href="#[2565748]">PAbt_Handler</a>
 <LI><a href="#[256570c]">DAbt_Handler</a>
 <LI><a href="#[25656d0]">IRQ_Handler</a>
 <LI><a href="#[2565694]">FIQ_Handler</a>
 <LI><a href="#[255eac4]">__main</a>
 <LI><a href="#[2563fd8]">main</a>
 <LI><a href="#[255e3bc]">_sputc</a>
 <LI><a href="#[255e524]">_printf_input_char</a>
 <LI><a href="#[2559b14]">__I$use$semihosting</a>
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[2565568]"></a>Reset_Handler</STRONG> (ARM, 0 bytes, Stack size unknown bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[255eac4]"></a>__main</STRONG> (ARM, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[2557774]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
<LI><a href="#[255e998]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[2557774]"></a>__scatterload</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[255eac4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[2557738]"></a>__scatterload_rt2</STRONG> (ARM, 52 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[255e998]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[25576fc]"></a>__scatterload_null</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[2557558]"></a>__scatterload_copy</STRONG> (ARM, 40 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2557558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[2557558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[2557468]"></a>__scatterload_zeroinit</STRONG> (ARM, 44 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[255feb0]"></a>_printf_percent</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[2560ae0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf (via Veneer)
</UL>

<P><STRONG><a name="[255ffa0]"></a>_printf_s</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_s.o(.ARM.Collect$$_printf_percent$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = _printf_s &rArr; _printf_string &rArr; _printf_cs_common &rArr; _printf_str
</UL>
<BR>[Calls]<UL><LI><a href="#[255e254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string (via Veneer)
</UL>

<P><STRONG><a name="[255e164]"></a>_printf_percent_end</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[255ae4c]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Calls]<UL><LI><a href="#[2559cf4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[255c3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li (via Veneer)
</UL>

<P><STRONG><a name="[255d4f8]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000006))

<P><STRONG><a name="[255d444]"></a>__rt_lib_init_rand_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_rand_2 &rArr; _rand_init &rArr; srand
</UL>
<BR>[Calls]<UL><LI><a href="#[255fc1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rand_init
</UL>

<P><STRONG><a name="[255d480]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000008))

<P><STRONG><a name="[255ccc4]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002A))

<P><STRONG><a name="[255cd3c]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000028))

<P><STRONG><a name="[255d0fc]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[255cf94]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[255cbd4]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[255cc4c]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[255d00c]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[255cf1c]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[255d354]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000D))

<P><STRONG><a name="[255d2dc]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))

<P><STRONG><a name="[255d264]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[255d1ec]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[255d174]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[255d408]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[255cb98]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002F))

<P><STRONG><a name="[255d084]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[255cea4]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[2558b24]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[25598f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls (via Veneer)
</UL>

<P><STRONG><a name="[2557cd8]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[2557af8]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[2557abc]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[2557c24]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[2557d8c]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000003))

<P><STRONG><a name="[2557bac]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000B))

<P><STRONG><a name="[255e998]"></a>__rt_entry</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[2557738]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
<LI><a href="#[255eac4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[255c490]"></a>__rt_entry_presh_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[255c10c]"></a>__rt_entry_sh</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[255b950]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[255c3dc]"></a>__rt_entry_li</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[255ae4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init (via Veneer)
</UL>

<P><STRONG><a name="[255c418]"></a>__rt_entry_postsh_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[255c328]"></a>__rt_entry_main</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Calls]<UL><LI><a href="#[255b7e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit (via BX)
</UL>

<P><STRONG><a name="[255c364]"></a>__rt_entry_postli_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[255a5a0]"></a>__rt_exit</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[255b7e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit (via Veneer)
</UL>

<P><STRONG><a name="[25598f8]"></a>__rt_exit_ls</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[2558b24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown (via Veneer)
</UL>

<P><STRONG><a name="[2559934]"></a>__rt_exit_prels_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[25598bc]"></a>__rt_exit_exit</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[2559c04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[25655a4]"></a>__user_initial_stackheap</STRONG> (ARM, 0 bytes, Stack size unknown bytes, startup.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[255b950]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[2564104]"></a>DATA_ERROR</STRONG> (ARM, 56 bytes, Stack size 0 bytes, p1.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2563fd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[25640c8]"></a>PH_NO_WRITE_EEPROM</STRONG> (ARM, 216 bytes, Stack size 88 bytes, p1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = PH_NO_WRITE_EEPROM &rArr; I2C_EEPROM_PAGE_WRITE
</UL>
<BR>[Calls]<UL><LI><a href="#[2563ba0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_STR
<LI><a href="#[2563df8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EEPROM_PAGE_WRITE
</UL>
<BR>[Called By]<UL><LI><a href="#[2564014]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INIT_SETUP
<LI><a href="#[2564050]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADMIN_LOGIN
</UL>

<P><STRONG><a name="[256408c]"></a>USER_LOGIN</STRONG> (ARM, 1032 bytes, Stack size 8 bytes, p1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = USER_LOGIN &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[255f7a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[2560cc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf (via Veneer)
<LI><a href="#[2563a74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_milli
<LI><a href="#[2563ba0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_STR
<LI><a href="#[2563c18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NUM_KEY
<LI><a href="#[2563c90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_STR
<LI><a href="#[2563d08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_COMMAND
<LI><a href="#[2563e34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EEPROM_PAGE_READ
<LI><a href="#[2563e70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_SMS
<LI><a href="#[2563eac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_OTP
<LI><a href="#[2563ee8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DOOR_OPEN
<LI><a href="#[2563f24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DOOR_IDLE
<LI><a href="#[2563f60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DOOR_CLOSE
<LI><a href="#[2563f9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ALPHA_KEY
</UL>
<BR>[Called By]<UL><LI><a href="#[2563fd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2564050]"></a>ADMIN_LOGIN</STRONG> (ARM, 4064 bytes, Stack size 8 bytes, p1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = ADMIN_LOGIN &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[255f7a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[255f8d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[255f9c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy (via Veneer)
<LI><a href="#[255fab4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncat (via Veneer)
<LI><a href="#[2560cc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf (via Veneer)
<LI><a href="#[2563a74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_milli
<LI><a href="#[2563ba0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_STR
<LI><a href="#[2563c18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NUM_KEY
<LI><a href="#[2563c90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_STR
<LI><a href="#[2563d08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_COMMAND
<LI><a href="#[2563df8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EEPROM_PAGE_WRITE
<LI><a href="#[2563e34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EEPROM_PAGE_READ
<LI><a href="#[2563e70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_SMS
<LI><a href="#[2563eac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_OTP
<LI><a href="#[2563f9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ALPHA_KEY
<LI><a href="#[25640c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PH_NO_WRITE_EEPROM
</UL>
<BR>[Called By]<UL><LI><a href="#[2563fd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2564014]"></a>INIT_SETUP</STRONG> (ARM, 2340 bytes, Stack size 8 bytes, p1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = INIT_SETUP &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[255f7a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[255f8d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[255f9c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy (via Veneer)
<LI><a href="#[255fab4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncat (via Veneer)
<LI><a href="#[2560cc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf (via Veneer)
<LI><a href="#[2563a74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_milli
<LI><a href="#[2563ba0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_STR
<LI><a href="#[2563c18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NUM_KEY
<LI><a href="#[2563c90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_STR
<LI><a href="#[2563d08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_COMMAND
<LI><a href="#[2563df8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EEPROM_PAGE_WRITE
<LI><a href="#[2563e34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EEPROM_PAGE_READ
<LI><a href="#[2563e70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_SMS
<LI><a href="#[2563eac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_OTP
<LI><a href="#[2563f9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ALPHA_KEY
<LI><a href="#[25640c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PH_NO_WRITE_EEPROM
</UL>
<BR>[Called By]<UL><LI><a href="#[2563fd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2563fd8]"></a>main</STRONG> (ARM, 568 bytes, Stack size 8 bytes, p1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = main &rArr; INIT_SETUP &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[255f8d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[2563a38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
<LI><a href="#[2563ba0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_STR
<LI><a href="#[2563bdc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_INIT
<LI><a href="#[2563c90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_STR
<LI><a href="#[2563ccc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_INIT
<LI><a href="#[2563d08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_COMMAND
<LI><a href="#[2563d44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L293D_INIT
<LI><a href="#[2563d80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEYPAD_INIT
<LI><a href="#[2563dbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_INIT
<LI><a href="#[2563e34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EEPROM_PAGE_READ
<LI><a href="#[2563f24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DOOR_IDLE
<LI><a href="#[2564014]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INIT_SETUP
<LI><a href="#[2564050]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADMIN_LOGIN
<LI><a href="#[256408c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USER_LOGIN
<LI><a href="#[2564104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATA_ERROR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtentry2.o(.ARM.Collect$$rtentry$$0000000D)
</UL>
<P><STRONG><a name="[2563a38]"></a>millis</STRONG> (ARM, 32 bytes, Stack size 0 bytes, delay.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2563c18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NUM_KEY
<LI><a href="#[2563f9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ALPHA_KEY
<LI><a href="#[2563fd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[256345c]"></a>delay_micro</STRONG> (ARM, 64 bytes, Stack size 0 bytes, delay.o(.text), UNUSED)

<P><STRONG><a name="[2563a74]"></a>delay_milli</STRONG> (ARM, 64 bytes, Stack size 0 bytes, delay.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2561b84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DATA
<LI><a href="#[256237c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EEPROM_WRITE
<LI><a href="#[2563c18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NUM_KEY
<LI><a href="#[2563d08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_COMMAND
<LI><a href="#[2563df8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EEPROM_PAGE_WRITE
<LI><a href="#[2563e70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_SMS
<LI><a href="#[2564014]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INIT_SETUP
<LI><a href="#[2564050]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADMIN_LOGIN
<LI><a href="#[256408c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USER_LOGIN
</UL>

<P><STRONG><a name="[2563420]"></a>delay_sec</STRONG> (ARM, 64 bytes, Stack size 0 bytes, delay.o(.text), UNUSED)

<P><STRONG><a name="[2563e70]"></a>GSM_SMS</STRONG> (ARM, 120 bytes, Stack size 8 bytes, gsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GSM_SMS &rArr; UART0_STR
</UL>
<BR>[Calls]<UL><LI><a href="#[2562e44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_TX
<LI><a href="#[2563a74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_milli
<LI><a href="#[2563ba0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_STR
</UL>
<BR>[Called By]<UL><LI><a href="#[2564014]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INIT_SETUP
<LI><a href="#[2564050]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADMIN_LOGIN
<LI><a href="#[256408c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USER_LOGIN
</UL>

<P><STRONG><a name="[2563eac]"></a>GSM_OTP</STRONG> (ARM, 112 bytes, Stack size 24 bytes, gsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36 + Unknown Stack Size
<LI>Call Chain = GSM_OTP &rArr; rand
</UL>
<BR>[Calls]<UL><LI><a href="#[255f4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[255f550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[255fbe0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand (via Veneer)
<LI><a href="#[255fc58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[2564014]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INIT_SETUP
<LI><a href="#[2564050]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADMIN_LOGIN
<LI><a href="#[256408c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USER_LOGIN
</UL>

<P><STRONG><a name="[2563dbc]"></a>I2C_INIT</STRONG> (ARM, 48 bytes, Stack size 0 bytes, i2c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2563fd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[25629d0]"></a>I2C_START</STRONG> (ARM, 52 bytes, Stack size 0 bytes, i2c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2562340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EEPROM_READ
<LI><a href="#[256237c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EEPROM_WRITE
<LI><a href="#[2563df8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EEPROM_PAGE_WRITE
<LI><a href="#[2563e34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EEPROM_PAGE_READ
</UL>

<P><STRONG><a name="[2562994]"></a>I2C_RESTART</STRONG> (ARM, 60 bytes, Stack size 0 bytes, i2c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2562340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EEPROM_READ
<LI><a href="#[2563e34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EEPROM_PAGE_READ
</UL>

<P><STRONG><a name="[2562958]"></a>I2C_STOP</STRONG> (ARM, 24 bytes, Stack size 0 bytes, i2c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2562340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EEPROM_READ
<LI><a href="#[256237c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EEPROM_WRITE
<LI><a href="#[2563df8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EEPROM_PAGE_WRITE
<LI><a href="#[2563e34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EEPROM_PAGE_READ
</UL>

<P><STRONG><a name="[256291c]"></a>I2C_WRITE</STRONG> (ARM, 48 bytes, Stack size 0 bytes, i2c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2562340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EEPROM_READ
<LI><a href="#[256237c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EEPROM_WRITE
<LI><a href="#[2563df8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EEPROM_PAGE_WRITE
<LI><a href="#[2563e34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EEPROM_PAGE_READ
</UL>

<P><STRONG><a name="[25628e0]"></a>I2C_NACK</STRONG> (ARM, 56 bytes, Stack size 0 bytes, i2c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2562340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EEPROM_READ
<LI><a href="#[2563e34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EEPROM_PAGE_READ
</UL>

<P><STRONG><a name="[25628a4]"></a>I2C_MASTERACK</STRONG> (ARM, 68 bytes, Stack size 0 bytes, i2c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2563e34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EEPROM_PAGE_READ
</UL>

<P><STRONG><a name="[256237c]"></a>I2C_EEPROM_WRITE</STRONG> (ARM, 72 bytes, Stack size 16 bytes, i2c_eeprom.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[256291c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WRITE
<LI><a href="#[2562958]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_STOP
<LI><a href="#[25629d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_START
<LI><a href="#[2563a74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_milli
</UL>

<P><STRONG><a name="[2562340]"></a>I2C_EEPROM_READ</STRONG> (ARM, 84 bytes, Stack size 16 bytes, i2c_eeprom.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[25628e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_NACK
<LI><a href="#[256291c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WRITE
<LI><a href="#[2562958]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_STOP
<LI><a href="#[2562994]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RESTART
<LI><a href="#[25629d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_START
</UL>

<P><STRONG><a name="[2563df8]"></a>I2C_EEPROM_PAGE_WRITE</STRONG> (ARM, 100 bytes, Stack size 24 bytes, i2c_eeprom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = I2C_EEPROM_PAGE_WRITE
</UL>
<BR>[Calls]<UL><LI><a href="#[256291c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WRITE
<LI><a href="#[2562958]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_STOP
<LI><a href="#[25629d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_START
<LI><a href="#[2563a74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_milli
</UL>
<BR>[Called By]<UL><LI><a href="#[2564014]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INIT_SETUP
<LI><a href="#[2564050]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADMIN_LOGIN
<LI><a href="#[25640c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PH_NO_WRITE_EEPROM
</UL>

<P><STRONG><a name="[2563e34]"></a>I2C_EEPROM_PAGE_READ</STRONG> (ARM, 156 bytes, Stack size 24 bytes, i2c_eeprom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = I2C_EEPROM_PAGE_READ
</UL>
<BR>[Calls]<UL><LI><a href="#[25628a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MASTERACK
<LI><a href="#[25628e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_NACK
<LI><a href="#[256291c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WRITE
<LI><a href="#[2562958]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_STOP
<LI><a href="#[2562994]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RESTART
<LI><a href="#[25629d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_START
</UL>
<BR>[Called By]<UL><LI><a href="#[2563fd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[2564014]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INIT_SETUP
<LI><a href="#[2564050]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADMIN_LOGIN
<LI><a href="#[256408c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USER_LOGIN
</UL>

<P><STRONG><a name="[2563d44]"></a>L293D_INIT</STRONG> (ARM, 24 bytes, Stack size 0 bytes, l293d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2563fd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2563ee8]"></a>DOOR_OPEN</STRONG> (ARM, 32 bytes, Stack size 0 bytes, l293d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[256408c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USER_LOGIN
</UL>

<P><STRONG><a name="[2563f60]"></a>DOOR_CLOSE</STRONG> (ARM, 32 bytes, Stack size 0 bytes, l293d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[256408c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USER_LOGIN
</UL>

<P><STRONG><a name="[2563f24]"></a>DOOR_IDLE</STRONG> (ARM, 32 bytes, Stack size 0 bytes, l293d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2563fd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[256408c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USER_LOGIN
</UL>

<P><STRONG><a name="[2563d08]"></a>LCD_COMMAND</STRONG> (ARM, 132 bytes, Stack size 8 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LCD_COMMAND
</UL>
<BR>[Calls]<UL><LI><a href="#[2563a74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_milli
</UL>
<BR>[Called By]<UL><LI><a href="#[2561b0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SCROLL
<LI><a href="#[2563c18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NUM_KEY
<LI><a href="#[2563ccc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_INIT
<LI><a href="#[2563f9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ALPHA_KEY
<LI><a href="#[2563fd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[2564014]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INIT_SETUP
<LI><a href="#[2564050]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADMIN_LOGIN
<LI><a href="#[256408c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USER_LOGIN
</UL>

<P><STRONG><a name="[2563ccc]"></a>LCD_INIT</STRONG> (ARM, 72 bytes, Stack size 8 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LCD_INIT &rArr; LCD_COMMAND
</UL>
<BR>[Calls]<UL><LI><a href="#[2563d08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_COMMAND
</UL>
<BR>[Called By]<UL><LI><a href="#[2563fd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2561b84]"></a>LCD_DATA</STRONG> (ARM, 132 bytes, Stack size 8 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LCD_DATA
</UL>
<BR>[Calls]<UL><LI><a href="#[2563a74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_milli
</UL>
<BR>[Called By]<UL><LI><a href="#[2561b0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SCROLL
<LI><a href="#[2561b48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_INTEGER
<LI><a href="#[2563c18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NUM_KEY
<LI><a href="#[2563c90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_STR
<LI><a href="#[2563f9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ALPHA_KEY
</UL>

<P><STRONG><a name="[2561b48]"></a>LCD_INTEGER</STRONG> (ARM, 136 bytes, Stack size 24 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LCD_INTEGER &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[255f550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[2561b84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DATA
</UL>
<BR>[Called By]<UL><LI><a href="#[2563c18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NUM_KEY
<LI><a href="#[2563f9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ALPHA_KEY
</UL>

<P><STRONG><a name="[2563c90]"></a>LCD_STR</STRONG> (ARM, 40 bytes, Stack size 8 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LCD_STR &rArr; LCD_DATA
</UL>
<BR>[Calls]<UL><LI><a href="#[2561b84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DATA
</UL>
<BR>[Called By]<UL><LI><a href="#[2563c18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NUM_KEY
<LI><a href="#[2563f9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ALPHA_KEY
<LI><a href="#[2563fd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[2564014]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INIT_SETUP
<LI><a href="#[2564050]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADMIN_LOGIN
<LI><a href="#[256408c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USER_LOGIN
</UL>

<P><STRONG><a name="[2561b0c]"></a>LCD_SCROLL</STRONG> (ARM, 136 bytes, Stack size 32 bytes, lcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2561b84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DATA
<LI><a href="#[2563d08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_COMMAND
</UL>

<P><STRONG><a name="[2563bdc]"></a>UART0_INIT</STRONG> (ARM, 52 bytes, Stack size 0 bytes, uart0.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2563fd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2562e44]"></a>UART0_TX</STRONG> (ARM, 36 bytes, Stack size 0 bytes, uart0.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[256165c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_INTEGER
<LI><a href="#[2563ba0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_STR
<LI><a href="#[2563e70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_SMS
</UL>

<P><STRONG><a name="[2561698]"></a>UART0_RX</STRONG> (ARM, 32 bytes, Stack size 0 bytes, uart0.o(.text), UNUSED)

<P><STRONG><a name="[2563ba0]"></a>UART0_STR</STRONG> (ARM, 40 bytes, Stack size 4 bytes, uart0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = UART0_STR
</UL>
<BR>[Calls]<UL><LI><a href="#[2562e44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_TX
</UL>
<BR>[Called By]<UL><LI><a href="#[2563e70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_SMS
<LI><a href="#[2563fd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[2564014]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INIT_SETUP
<LI><a href="#[2564050]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADMIN_LOGIN
<LI><a href="#[256408c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USER_LOGIN
<LI><a href="#[25640c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PH_NO_WRITE_EEPROM
</UL>

<P><STRONG><a name="[256165c]"></a>UART0_INTEGER</STRONG> (ARM, 136 bytes, Stack size 24 bytes, uart0.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[255f550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[2562e44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_TX
</UL>

<P><STRONG><a name="[2563d80]"></a>KEYPAD_INIT</STRONG> (ARM, 68 bytes, Stack size 0 bytes, whole_keypad.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2563fd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[25610bc]"></a>keypad</STRONG> (ARM, 124 bytes, Stack size 0 bytes, whole_keypad.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2563c18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NUM_KEY
<LI><a href="#[2563f9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ALPHA_KEY
</UL>

<P><STRONG><a name="[2563f9c]"></a>ALPHA_KEY</STRONG> (ARM, 984 bytes, Stack size 64 bytes, whole_keypad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = ALPHA_KEY &rArr; LCD_INTEGER &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[25610bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keypad
<LI><a href="#[2561b48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_INTEGER
<LI><a href="#[2561b84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DATA
<LI><a href="#[2563a38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
<LI><a href="#[2563c90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_STR
<LI><a href="#[2563d08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_COMMAND
</UL>
<BR>[Called By]<UL><LI><a href="#[2564014]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INIT_SETUP
<LI><a href="#[2564050]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADMIN_LOGIN
<LI><a href="#[256408c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USER_LOGIN
</UL>

<P><STRONG><a name="[2563c18]"></a>NUM_KEY</STRONG> (ARM, 652 bytes, Stack size 48 bytes, whole_keypad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = NUM_KEY &rArr; LCD_INTEGER &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[25610bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keypad
<LI><a href="#[2561b48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_INTEGER
<LI><a href="#[2561b84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DATA
<LI><a href="#[2563a38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
<LI><a href="#[2563a74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_milli
<LI><a href="#[2563c90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_STR
<LI><a href="#[2563d08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_COMMAND
</UL>
<BR>[Called By]<UL><LI><a href="#[2564014]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INIT_SETUP
<LI><a href="#[2564050]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADMIN_LOGIN
<LI><a href="#[256408c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USER_LOGIN
</UL>

<P><STRONG><a name="[2560cc0]"></a>__2sprintf</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, noretval__2sprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[255e3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[255e4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[2564014]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INIT_SETUP (via Veneer)
<LI><a href="#[2564050]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADMIN_LOGIN (via Veneer)
<LI><a href="#[256408c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USER_LOGIN (via Veneer)
</UL>

<P><STRONG><a name="[2560ae0]"></a>__printf</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, __printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[255feb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent (via Veneer)
<LI><a href="#[2560a68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_call_via_r2
<LI><a href="#[2560aa4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_call_via_r1
</UL>
<BR>[Called By]<UL><LI><a href="#[255e4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[2560978]"></a>_printf_str</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, _printf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_str
</UL>
<BR>[Calls]<UL><LI><a href="#[25608c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding (Weak Reference)
<LI><a href="#[2560900]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding (Weak Reference)
<LI><a href="#[2560a68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_call_via_r2
</UL>
<BR>[Called By]<UL><LI><a href="#[255e2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[255fc58]"></a>srand</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, rand.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = srand
</UL>
<BR>[Called By]<UL><LI><a href="#[255fc1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rand_init
<LI><a href="#[2563eac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_OTP (via Veneer)
</UL>

<P><STRONG><a name="[255fc1c]"></a>_rand_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rand.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _rand_init &rArr; srand
</UL>
<BR>[Calls]<UL><LI><a href="#[255fc58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand
</UL>
<BR>[Called By]<UL><LI><a href="#[255d444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_rand_2
</UL>

<P><STRONG><a name="[255fbe0]"></a>rand</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, rand.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = rand
</UL>
<BR>[Called By]<UL><LI><a href="#[2563eac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_OTP (via Veneer)
</UL>

<P><STRONG><a name="[255fab4]"></a>strncat</STRONG> (Thumb, 38 bytes, Stack size 4 bytes, strncat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = strncat
</UL>
<BR>[Called By]<UL><LI><a href="#[2564014]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INIT_SETUP (via Veneer)
<LI><a href="#[2564050]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADMIN_LOGIN (via Veneer)
</UL>

<P><STRONG><a name="[255f9c4]"></a>strcpy</STRONG> (Thumb, 74 bytes, Stack size 12 bytes, strcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2564014]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INIT_SETUP (via Veneer)
<LI><a href="#[2564050]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADMIN_LOGIN (via Veneer)
</UL>

<P><STRONG><a name="[255f8d4]"></a>strncpy</STRONG> (ARM, 108 bytes, Stack size 8 bytes, strncpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[255e074]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[2563fd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[2564014]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INIT_SETUP
<LI><a href="#[2564050]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADMIN_LOGIN
</UL>

<P><STRONG><a name="[255f7a8]"></a>strcmp</STRONG> (ARM, 156 bytes, Stack size 4 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[2564014]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INIT_SETUP
<LI><a href="#[2564050]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADMIN_LOGIN
<LI><a href="#[256408c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USER_LOGIN
</UL>

<P><STRONG><a name="[255f58c]"></a>__aeabi_idiv</STRONG> (ARM, 0 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[255f550]"></a>__aeabi_idivmod</STRONG> (ARM, 384 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[256165c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_INTEGER
<LI><a href="#[2561b48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_INTEGER
<LI><a href="#[2563eac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_OTP
</UL>

<P><STRONG><a name="[255ec2c]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[255ebf0]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[255ebb4]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[255e4e8]"></a>_printf_char_common</STRONG> (Thumb, 38 bytes, Stack size 72 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2560ae0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2560cc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>

<P><STRONG><a name="[255e3bc]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _sputc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2560cc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> noretval__2sprintf.o(.text)
</UL>
<P><STRONG><a name="[255e2cc]"></a>_printf_cs_common</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _printf_cs_common &rArr; _printf_str
</UL>
<BR>[Calls]<UL><LI><a href="#[255e218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_mbtowc (Weak Reference)
<LI><a href="#[2560978]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[255e254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[255e290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[255e290]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_char.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[255e2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[255e254]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _printf_string &rArr; _printf_cs_common &rArr; _printf_str
</UL>
<BR>[Calls]<UL><LI><a href="#[255e2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[255ffa0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s (via Veneer)
</UL>

<P><STRONG><a name="[255e074]"></a>__aeabi_memclr</STRONG> (ARM, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[255f8d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>

<P><STRONG><a name="[255e038]"></a>__rt_memclr</STRONG> (ARM, 64 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[255bba8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[255dffc]"></a>_memset</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[255bc5c]"></a>__aeabi_memclr4</STRONG> (ARM, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[255bc20]"></a>__aeabi_memclr8</STRONG> (ARM, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[255bbe4]"></a>__rt_memclr_w</STRONG> (ARM, 84 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[255bba8]"></a>_memset_w</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[255e038]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL>

<P><STRONG><a name="[255b950]"></a>__user_setup_stackheap</STRONG> (ARM, 96 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[255a690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
<LI><a href="#[25655a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
</UL>
<BR>[Called By]<UL><LI><a href="#[255c10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[255b7e8]"></a>exit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[255a5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit (via Veneer)
<LI><a href="#[255b770]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_call_atexit_fns (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[255c328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[255a6cc]"></a>__user_libspace</STRONG> (ARM, 12 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[255a690]"></a>__user_perproc_libspace</STRONG> (ARM, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[255b950]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[255a654]"></a>__user_perthread_libspace</STRONG> (ARM, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[2559c04]"></a>_sys_exit</STRONG> (ARM, 20 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[25598bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[2559b14]"></a>__I$use$semihosting</STRONG> (ARM, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> sys_exit.o(.text)
</UL>
<P><STRONG><a name="[2559ad8]"></a>__use_no_semihosting_swi</STRONG> (ARM, 4 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[255f514]"></a>__aeabi_uidiv</STRONG> (ARM, 0 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text_udiv), UNUSED)

<P><STRONG><a name="[255f4d8]"></a>__aeabi_uidivmod</STRONG> (ARM, 28 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text_udiv))
<BR><BR>[Calls]<UL><LI><a href="#[255f5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_div_large
<LI><a href="#[255f604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_div4
<LI><a href="#[255f640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_div8
</UL>
<BR>[Called By]<UL><LI><a href="#[2563eac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_OTP
</UL>

<P><STRONG><a name="[2560aa4]"></a>__ARM_common_call_via_r1</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, __printf.o(i.__ARM_common_call_via_r1))
<BR><BR>[Called By]<UL><LI><a href="#[2560ae0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[2560a68]"></a>__ARM_common_call_via_r2</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, __printf.o(i.__ARM_common_call_via_r2))
<BR><BR>[Called By]<UL><LI><a href="#[2560978]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[2560ae0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[2559d30]"></a>__fplib_config_pureend_doubles</STRONG> (ARM, 0 bytes, Stack size 0 bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[2559cf4]"></a>_fp_init</STRONG> (ARM, 4 bytes, Stack size 0 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Called By]<UL><LI><a href="#[255ae4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init (via Veneer)
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[25657c0]"></a>Undef_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[25657c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Undef_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[25657c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Undef_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[2565784]"></a>SWI_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[2565784]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2565784]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[2565748]"></a>PAbt_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[2565748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAbt_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2565748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAbt_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[256570c]"></a>DAbt_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[256570c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAbt_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[256570c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAbt_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[25656d0]"></a>IRQ_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[25656d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[25656d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[2565694]"></a>FIQ_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[2565694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIQ_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2565694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIQ_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[255f640]"></a>__arm_div8</STRONG> (ARM, 0 bytes, Stack size unknown bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[255f4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[255f604]"></a>__arm_div4</STRONG> (ARM, 0 bytes, Stack size unknown bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[255f4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[255f5c8]"></a>__arm_div_large</STRONG> (ARM, 0 bytes, Stack size unknown bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[255f4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[255e524]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[255b770]"></a>_call_atexit_fns</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[255b7e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[255e218]"></a>_printf_mbtowc</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[255e2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[2560900]"></a>_printf_post_padding</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[2560978]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>

<P><STRONG><a name="[25608c4]"></a>_printf_pre_padding</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[2560978]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>
<HR></body></html>
