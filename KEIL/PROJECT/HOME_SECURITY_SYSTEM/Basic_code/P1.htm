<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [C:\laptop\HSSD\Vector\ARM\KEIL\PROJECT\HOME_SECURITY_SYSTEM\Basic_code\P1.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image C:\laptop\HSSD\Vector\ARM\KEIL\PROJECT\HOME_SECURITY_SYSTEM\Basic_code\P1.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, RVCT4.0 [Build 524]: Last Updated: Fri Mar 22 18:31:26 2024
<BR><P>
<H3>Maximum Stack Usage =        144 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; ADMIN_LOGIN &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[2499568]">Reset_Handler</a>
 <LI><a href="#[24995a4]">__user_initial_stackheap</a>
 <LI><a href="#[24997c0]">Undef_Handler</a>
 <LI><a href="#[2499784]">SWI_Handler</a>
 <LI><a href="#[2499748]">PAbt_Handler</a>
 <LI><a href="#[249970c]">DAbt_Handler</a>
 <LI><a href="#[24996d0]">IRQ_Handler</a>
 <LI><a href="#[2499694]">FIQ_Handler</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[24997c0]">Undef_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[24997c0]">Undef_Handler</a><BR>
 <LI><a href="#[2499784]">SWI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2499784]">SWI_Handler</a><BR>
 <LI><a href="#[2499748]">PAbt_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2499748]">PAbt_Handler</a><BR>
 <LI><a href="#[249970c]">DAbt_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[249970c]">DAbt_Handler</a><BR>
 <LI><a href="#[24996d0]">IRQ_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[24996d0]">IRQ_Handler</a><BR>
 <LI><a href="#[2499694]">FIQ_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2499694]">FIQ_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[2499568]">Reset_Handler</a>
 <LI><a href="#[24997c0]">Undef_Handler</a>
 <LI><a href="#[2499784]">SWI_Handler</a>
 <LI><a href="#[2499748]">PAbt_Handler</a>
 <LI><a href="#[249970c]">DAbt_Handler</a>
 <LI><a href="#[24996d0]">IRQ_Handler</a>
 <LI><a href="#[2499694]">FIQ_Handler</a>
 <LI><a href="#[2492e0c]">__main</a>
 <LI><a href="#[24980c8]">main</a>
 <LI><a href="#[2492704]">_sputc</a>
 <LI><a href="#[249286c]">_printf_input_char</a>
 <LI><a href="#[248de5c]">__I$use$semihosting</a>
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[2499568]"></a>Reset_Handler</STRONG> (ARM, 0 bytes, Stack size unknown bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[2492e0c]"></a>__main</STRONG> (ARM, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[248babc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
<LI><a href="#[2492ce0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[248babc]"></a>__scatterload</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[2492e0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[248ba80]"></a>__scatterload_rt2</STRONG> (ARM, 52 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2492ce0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[248ba44]"></a>__scatterload_null</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[248b8a0]"></a>__scatterload_copy</STRONG> (ARM, 40 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[248b8a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[248b8a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[248b7b0]"></a>__scatterload_zeroinit</STRONG> (ARM, 44 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[2494018]"></a>_printf_percent</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[2494c48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf (via Veneer)
</UL>

<P><STRONG><a name="[2494108]"></a>_printf_s</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_s.o(.ARM.Collect$$_printf_percent$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = _printf_s &rArr; _printf_string &rArr; _printf_cs_common &rArr; _printf_str
</UL>
<BR>[Calls]<UL><LI><a href="#[249259c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string (via Veneer)
</UL>

<P><STRONG><a name="[24924ac]"></a>_printf_percent_end</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[248f194]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Calls]<UL><LI><a href="#[248e03c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[2490724]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li (via Veneer)
</UL>

<P><STRONG><a name="[2491840]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000006))

<P><STRONG><a name="[249178c]"></a>__rt_lib_init_rand_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_rand_2 &rArr; _rand_init &rArr; srand
</UL>
<BR>[Calls]<UL><LI><a href="#[2493d84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rand_init
</UL>

<P><STRONG><a name="[24917c8]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000008))

<P><STRONG><a name="[249100c]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002A))

<P><STRONG><a name="[2491084]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000028))

<P><STRONG><a name="[2491444]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[24912dc]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[2490f1c]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[2490f94]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[2491354]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[2491264]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[249169c]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000D))

<P><STRONG><a name="[2491624]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))

<P><STRONG><a name="[24915ac]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[2491534]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[24914bc]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[2491750]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[2490ee0]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002F))

<P><STRONG><a name="[24913cc]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[24911ec]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[248ce6c]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[248dc40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls (via Veneer)
</UL>

<P><STRONG><a name="[248c020]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[248be40]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[248be04]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[248bf6c]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[248c0d4]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000003))

<P><STRONG><a name="[248bef4]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000B))

<P><STRONG><a name="[2492ce0]"></a>__rt_entry</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[248ba80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
<LI><a href="#[2492e0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[24907d8]"></a>__rt_entry_presh_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[2490454]"></a>__rt_entry_sh</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[248fc98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[2490724]"></a>__rt_entry_li</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[248f194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init (via Veneer)
</UL>

<P><STRONG><a name="[2490760]"></a>__rt_entry_postsh_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[2490670]"></a>__rt_entry_main</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Calls]<UL><LI><a href="#[248fb30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit (via BX)
</UL>

<P><STRONG><a name="[24906ac]"></a>__rt_entry_postli_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[248e8e8]"></a>__rt_exit</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[248fb30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit (via Veneer)
</UL>

<P><STRONG><a name="[248dc40]"></a>__rt_exit_ls</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[248ce6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown (via Veneer)
</UL>

<P><STRONG><a name="[248dc7c]"></a>__rt_exit_prels_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[248dc04]"></a>__rt_exit_exit</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[248df4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[24995a4]"></a>__user_initial_stackheap</STRONG> (ARM, 0 bytes, Stack size unknown bytes, startup.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[248fc98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[249817c]"></a>USER_LOGIN</STRONG> (ARM, 412 bytes, Stack size 8 bytes, p1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = USER_LOGIN &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2493af0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[2494e28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf (via Veneer)
<LI><a href="#[2497ba0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_milli
<LI><a href="#[2497ccc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_STR
<LI><a href="#[2497d44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NUM_KEY
<LI><a href="#[2497d80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_STR
<LI><a href="#[2497df8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_COMMAND
<LI><a href="#[2497f24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EEPROM_PAGE_READ
<LI><a href="#[2497f60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_SMS
<LI><a href="#[2497f9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_OTP
<LI><a href="#[2497fd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DOOR_OPEN
<LI><a href="#[2498014]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DOOR_IDLE
<LI><a href="#[2498050]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DOOR_CLOSE
<LI><a href="#[249808c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ALPHA_KEY
</UL>
<BR>[Called By]<UL><LI><a href="#[24980c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2498140]"></a>ADMIN_LOGIN</STRONG> (ARM, 684 bytes, Stack size 8 bytes, p1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = ADMIN_LOGIN &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2493af0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[2494e28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf (via Veneer)
<LI><a href="#[2497ba0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_milli
<LI><a href="#[2497d44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NUM_KEY
<LI><a href="#[2497d80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_STR
<LI><a href="#[2497df8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_COMMAND
<LI><a href="#[2497f24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EEPROM_PAGE_READ
<LI><a href="#[2497f60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_SMS
<LI><a href="#[2497f9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_OTP
<LI><a href="#[2497fd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DOOR_OPEN
<LI><a href="#[2498014]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DOOR_IDLE
<LI><a href="#[2498050]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DOOR_CLOSE
<LI><a href="#[249808c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ALPHA_KEY
</UL>
<BR>[Called By]<UL><LI><a href="#[24980c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2498104]"></a>INIT_SETUP</STRONG> (ARM, 832 bytes, Stack size 8 bytes, p1.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2493af0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[2493c1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[2494e28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf (via Veneer)
<LI><a href="#[2497ba0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_milli
<LI><a href="#[2497d44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NUM_KEY
<LI><a href="#[2497d80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_STR
<LI><a href="#[2497df8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_COMMAND
<LI><a href="#[2497ee8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EEPROM_PAGE_WRITE
<LI><a href="#[2497f24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EEPROM_PAGE_READ
<LI><a href="#[2497f60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_SMS
<LI><a href="#[2497f9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_OTP
<LI><a href="#[2497fd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DOOR_OPEN
<LI><a href="#[2498014]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DOOR_IDLE
<LI><a href="#[2498050]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DOOR_CLOSE
<LI><a href="#[249808c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ALPHA_KEY
</UL>

<P><STRONG><a name="[24980c8]"></a>main</STRONG> (ARM, 484 bytes, Stack size 8 bytes, p1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = main &rArr; ADMIN_LOGIN &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2497b64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
<LI><a href="#[2497ba0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_milli
<LI><a href="#[2497ccc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_STR
<LI><a href="#[2497d08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_INIT
<LI><a href="#[2497d80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_STR
<LI><a href="#[2497dbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_INIT
<LI><a href="#[2497df8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_COMMAND
<LI><a href="#[2497e34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L293D_INIT
<LI><a href="#[2497e70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEYPAD_INIT
<LI><a href="#[2497eac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_INIT
<LI><a href="#[2497ee8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EEPROM_PAGE_WRITE
<LI><a href="#[2497f24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EEPROM_PAGE_READ
<LI><a href="#[2498014]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DOOR_IDLE
<LI><a href="#[2498140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADMIN_LOGIN
<LI><a href="#[249817c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USER_LOGIN
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtentry2.o(.ARM.Collect$$rtentry$$0000000D)
</UL>
<P><STRONG><a name="[2497b64]"></a>millis</STRONG> (ARM, 32 bytes, Stack size 0 bytes, delay.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2497d44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NUM_KEY
<LI><a href="#[249808c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ALPHA_KEY
<LI><a href="#[24980c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2497600]"></a>delay_micro</STRONG> (ARM, 64 bytes, Stack size 0 bytes, delay.o(.text), UNUSED)

<P><STRONG><a name="[2497ba0]"></a>delay_milli</STRONG> (ARM, 64 bytes, Stack size 0 bytes, delay.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2495cec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DATA
<LI><a href="#[2497d44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NUM_KEY
<LI><a href="#[2497df8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_COMMAND
<LI><a href="#[2497f60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_SMS
<LI><a href="#[249808c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ALPHA_KEY
<LI><a href="#[24980c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[2498104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INIT_SETUP
<LI><a href="#[2498140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADMIN_LOGIN
<LI><a href="#[249817c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USER_LOGIN
</UL>

<P><STRONG><a name="[24975c4]"></a>delay_sec</STRONG> (ARM, 64 bytes, Stack size 0 bytes, delay.o(.text), UNUSED)

<P><STRONG><a name="[2497f60]"></a>GSM_SMS</STRONG> (ARM, 120 bytes, Stack size 8 bytes, gsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GSM_SMS &rArr; UART0_STR
</UL>
<BR>[Calls]<UL><LI><a href="#[2496fac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_TX
<LI><a href="#[2497ba0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_milli
<LI><a href="#[2497ccc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_STR
</UL>
<BR>[Called By]<UL><LI><a href="#[2498104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INIT_SETUP
<LI><a href="#[2498140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADMIN_LOGIN
<LI><a href="#[249817c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USER_LOGIN
</UL>

<P><STRONG><a name="[2497f9c]"></a>GSM_OTP</STRONG> (ARM, 112 bytes, Stack size 24 bytes, gsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36 + Unknown Stack Size
<LI>Call Chain = GSM_OTP &rArr; rand
</UL>
<BR>[Calls]<UL><LI><a href="#[2493820]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[2493898]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[2493d48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand (via Veneer)
<LI><a href="#[2493dc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[2498104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INIT_SETUP
<LI><a href="#[2498140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADMIN_LOGIN
<LI><a href="#[249817c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USER_LOGIN
</UL>

<P><STRONG><a name="[2497eac]"></a>I2C_INIT</STRONG> (ARM, 48 bytes, Stack size 0 bytes, i2c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[24980c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2496b38]"></a>I2C_START</STRONG> (ARM, 52 bytes, Stack size 0 bytes, i2c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[24964a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EEPROM_READ
<LI><a href="#[24964e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EEPROM_WRITE
<LI><a href="#[2497ee8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EEPROM_PAGE_WRITE
<LI><a href="#[2497f24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EEPROM_PAGE_READ
</UL>

<P><STRONG><a name="[2496afc]"></a>I2C_RESTART</STRONG> (ARM, 60 bytes, Stack size 0 bytes, i2c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[24964a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EEPROM_READ
<LI><a href="#[2497f24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EEPROM_PAGE_READ
</UL>

<P><STRONG><a name="[2496ac0]"></a>I2C_STOP</STRONG> (ARM, 24 bytes, Stack size 0 bytes, i2c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[24964a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EEPROM_READ
<LI><a href="#[24964e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EEPROM_WRITE
<LI><a href="#[2497ee8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EEPROM_PAGE_WRITE
<LI><a href="#[2497f24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EEPROM_PAGE_READ
</UL>

<P><STRONG><a name="[2496a84]"></a>I2C_WRITE</STRONG> (ARM, 48 bytes, Stack size 0 bytes, i2c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[24964a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EEPROM_READ
<LI><a href="#[24964e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EEPROM_WRITE
<LI><a href="#[2497ee8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EEPROM_PAGE_WRITE
<LI><a href="#[2497f24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EEPROM_PAGE_READ
</UL>

<P><STRONG><a name="[2496a48]"></a>I2C_NACK</STRONG> (ARM, 56 bytes, Stack size 0 bytes, i2c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[24964a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EEPROM_READ
<LI><a href="#[2497f24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EEPROM_PAGE_READ
</UL>

<P><STRONG><a name="[2496a0c]"></a>I2C_MASTERACK</STRONG> (ARM, 68 bytes, Stack size 0 bytes, i2c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2497f24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EEPROM_PAGE_READ
</UL>

<P><STRONG><a name="[24964e4]"></a>I2C_EEPROM_WRITE</STRONG> (ARM, 64 bytes, Stack size 16 bytes, i2c_eeprom.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2496a84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WRITE
<LI><a href="#[2496ac0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_STOP
<LI><a href="#[2496b38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_START
</UL>

<P><STRONG><a name="[24964a8]"></a>I2C_EEPROM_READ</STRONG> (ARM, 84 bytes, Stack size 16 bytes, i2c_eeprom.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2496a48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_NACK
<LI><a href="#[2496a84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WRITE
<LI><a href="#[2496ac0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_STOP
<LI><a href="#[2496afc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RESTART
<LI><a href="#[2496b38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_START
</UL>

<P><STRONG><a name="[2497ee8]"></a>I2C_EEPROM_PAGE_WRITE</STRONG> (ARM, 92 bytes, Stack size 24 bytes, i2c_eeprom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = I2C_EEPROM_PAGE_WRITE
</UL>
<BR>[Calls]<UL><LI><a href="#[2496a84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WRITE
<LI><a href="#[2496ac0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_STOP
<LI><a href="#[2496b38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_START
</UL>
<BR>[Called By]<UL><LI><a href="#[24980c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[2498104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INIT_SETUP
</UL>

<P><STRONG><a name="[2497f24]"></a>I2C_EEPROM_PAGE_READ</STRONG> (ARM, 124 bytes, Stack size 24 bytes, i2c_eeprom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = I2C_EEPROM_PAGE_READ
</UL>
<BR>[Calls]<UL><LI><a href="#[2496a0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MASTERACK
<LI><a href="#[2496a48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_NACK
<LI><a href="#[2496a84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WRITE
<LI><a href="#[2496ac0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_STOP
<LI><a href="#[2496afc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RESTART
<LI><a href="#[2496b38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_START
</UL>
<BR>[Called By]<UL><LI><a href="#[24980c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[2498104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INIT_SETUP
<LI><a href="#[2498140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADMIN_LOGIN
<LI><a href="#[249817c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USER_LOGIN
</UL>

<P><STRONG><a name="[2497e34]"></a>L293D_INIT</STRONG> (ARM, 24 bytes, Stack size 0 bytes, l293d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[24980c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2497fd8]"></a>DOOR_OPEN</STRONG> (ARM, 32 bytes, Stack size 0 bytes, l293d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2498104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INIT_SETUP
<LI><a href="#[2498140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADMIN_LOGIN
<LI><a href="#[249817c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USER_LOGIN
</UL>

<P><STRONG><a name="[2498050]"></a>DOOR_CLOSE</STRONG> (ARM, 32 bytes, Stack size 0 bytes, l293d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2498104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INIT_SETUP
<LI><a href="#[2498140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADMIN_LOGIN
<LI><a href="#[249817c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USER_LOGIN
</UL>

<P><STRONG><a name="[2498014]"></a>DOOR_IDLE</STRONG> (ARM, 32 bytes, Stack size 0 bytes, l293d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[24980c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[2498104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INIT_SETUP
<LI><a href="#[2498140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADMIN_LOGIN
<LI><a href="#[249817c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USER_LOGIN
</UL>

<P><STRONG><a name="[2497df8]"></a>LCD_COMMAND</STRONG> (ARM, 132 bytes, Stack size 8 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LCD_COMMAND
</UL>
<BR>[Calls]<UL><LI><a href="#[2497ba0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_milli
</UL>
<BR>[Called By]<UL><LI><a href="#[2495c74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SCROLL
<LI><a href="#[2497d44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NUM_KEY
<LI><a href="#[2497dbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_INIT
<LI><a href="#[249808c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ALPHA_KEY
<LI><a href="#[24980c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[2498104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INIT_SETUP
<LI><a href="#[2498140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADMIN_LOGIN
<LI><a href="#[249817c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USER_LOGIN
</UL>

<P><STRONG><a name="[2497dbc]"></a>LCD_INIT</STRONG> (ARM, 72 bytes, Stack size 8 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LCD_INIT &rArr; LCD_COMMAND
</UL>
<BR>[Calls]<UL><LI><a href="#[2497df8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_COMMAND
</UL>
<BR>[Called By]<UL><LI><a href="#[24980c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2495cec]"></a>LCD_DATA</STRONG> (ARM, 132 bytes, Stack size 8 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LCD_DATA
</UL>
<BR>[Calls]<UL><LI><a href="#[2497ba0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_milli
</UL>
<BR>[Called By]<UL><LI><a href="#[2495c74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SCROLL
<LI><a href="#[2495cb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_INTEGER
<LI><a href="#[2497d44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NUM_KEY
<LI><a href="#[2497d80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_STR
<LI><a href="#[249808c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ALPHA_KEY
</UL>

<P><STRONG><a name="[2495cb0]"></a>LCD_INTEGER</STRONG> (ARM, 136 bytes, Stack size 24 bytes, lcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2493898]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[2495cec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DATA
</UL>

<P><STRONG><a name="[2497d80]"></a>LCD_STR</STRONG> (ARM, 40 bytes, Stack size 8 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LCD_STR &rArr; LCD_DATA
</UL>
<BR>[Calls]<UL><LI><a href="#[2495cec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DATA
</UL>
<BR>[Called By]<UL><LI><a href="#[2497d44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NUM_KEY
<LI><a href="#[249808c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ALPHA_KEY
<LI><a href="#[24980c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[2498104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INIT_SETUP
<LI><a href="#[2498140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADMIN_LOGIN
<LI><a href="#[249817c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USER_LOGIN
</UL>

<P><STRONG><a name="[2495c74]"></a>LCD_SCROLL</STRONG> (ARM, 136 bytes, Stack size 32 bytes, lcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2495cec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DATA
<LI><a href="#[2497df8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_COMMAND
</UL>

<P><STRONG><a name="[2497d08]"></a>UART0_INIT</STRONG> (ARM, 52 bytes, Stack size 0 bytes, uart0.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[24980c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2496fac]"></a>UART0_TX</STRONG> (ARM, 36 bytes, Stack size 0 bytes, uart0.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[24957c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_INTEGER
<LI><a href="#[2497ccc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_STR
<LI><a href="#[2497f60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_SMS
</UL>

<P><STRONG><a name="[2495800]"></a>UART0_RX</STRONG> (ARM, 32 bytes, Stack size 0 bytes, uart0.o(.text), UNUSED)

<P><STRONG><a name="[2497ccc]"></a>UART0_STR</STRONG> (ARM, 40 bytes, Stack size 4 bytes, uart0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = UART0_STR
</UL>
<BR>[Calls]<UL><LI><a href="#[2496fac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_TX
</UL>
<BR>[Called By]<UL><LI><a href="#[2497f60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_SMS
<LI><a href="#[24980c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[249817c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USER_LOGIN
</UL>

<P><STRONG><a name="[24957c4]"></a>UART0_INTEGER</STRONG> (ARM, 136 bytes, Stack size 24 bytes, uart0.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2493898]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[2496fac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_TX
</UL>

<P><STRONG><a name="[2497e70]"></a>KEYPAD_INIT</STRONG> (ARM, 68 bytes, Stack size 0 bytes, whole_keypad.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[24980c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2495224]"></a>keypad</STRONG> (ARM, 124 bytes, Stack size 0 bytes, whole_keypad.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2497d44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NUM_KEY
<LI><a href="#[249808c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ALPHA_KEY
</UL>

<P><STRONG><a name="[249808c]"></a>ALPHA_KEY</STRONG> (ARM, 824 bytes, Stack size 56 bytes, whole_keypad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ALPHA_KEY &rArr; LCD_STR &rArr; LCD_DATA
</UL>
<BR>[Calls]<UL><LI><a href="#[2495224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keypad
<LI><a href="#[2495cec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DATA
<LI><a href="#[2497b64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
<LI><a href="#[2497ba0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_milli
<LI><a href="#[2497d80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_STR
<LI><a href="#[2497df8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_COMMAND
</UL>
<BR>[Called By]<UL><LI><a href="#[2498104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INIT_SETUP
<LI><a href="#[2498140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADMIN_LOGIN
<LI><a href="#[249817c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USER_LOGIN
</UL>

<P><STRONG><a name="[2497d44]"></a>NUM_KEY</STRONG> (ARM, 572 bytes, Stack size 48 bytes, whole_keypad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = NUM_KEY &rArr; LCD_STR &rArr; LCD_DATA
</UL>
<BR>[Calls]<UL><LI><a href="#[2495224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keypad
<LI><a href="#[2495cec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DATA
<LI><a href="#[2497b64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
<LI><a href="#[2497ba0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_milli
<LI><a href="#[2497d80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_STR
<LI><a href="#[2497df8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_COMMAND
</UL>
<BR>[Called By]<UL><LI><a href="#[2498104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INIT_SETUP
<LI><a href="#[2498140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADMIN_LOGIN
<LI><a href="#[249817c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USER_LOGIN
</UL>

<P><STRONG><a name="[2494e28]"></a>__2sprintf</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, noretval__2sprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2492704]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[2492830]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[2498104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INIT_SETUP (via Veneer)
<LI><a href="#[2498140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADMIN_LOGIN (via Veneer)
<LI><a href="#[249817c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USER_LOGIN (via Veneer)
</UL>

<P><STRONG><a name="[2494c48]"></a>__printf</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, __printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2494018]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent (via Veneer)
<LI><a href="#[2494bd0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_call_via_r2
<LI><a href="#[2494c0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_call_via_r1
</UL>
<BR>[Called By]<UL><LI><a href="#[2492830]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[2494ae0]"></a>_printf_str</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, _printf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_str
</UL>
<BR>[Calls]<UL><LI><a href="#[2494a2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding (Weak Reference)
<LI><a href="#[2494a68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding (Weak Reference)
<LI><a href="#[2494bd0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_call_via_r2
</UL>
<BR>[Called By]<UL><LI><a href="#[2492614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[2493dc0]"></a>srand</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, rand.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = srand
</UL>
<BR>[Called By]<UL><LI><a href="#[2493d84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rand_init
<LI><a href="#[2497f9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_OTP (via Veneer)
</UL>

<P><STRONG><a name="[2493d84]"></a>_rand_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rand.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _rand_init &rArr; srand
</UL>
<BR>[Calls]<UL><LI><a href="#[2493dc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand
</UL>
<BR>[Called By]<UL><LI><a href="#[249178c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_rand_2
</UL>

<P><STRONG><a name="[2493d48]"></a>rand</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, rand.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = rand
</UL>
<BR>[Called By]<UL><LI><a href="#[2497f9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_OTP (via Veneer)
</UL>

<P><STRONG><a name="[2493c1c]"></a>strncpy</STRONG> (ARM, 108 bytes, Stack size 8 bytes, strncpy.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[24923bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[2498104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INIT_SETUP
</UL>

<P><STRONG><a name="[2493af0]"></a>strcmp</STRONG> (ARM, 156 bytes, Stack size 4 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[2498104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INIT_SETUP
<LI><a href="#[2498140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADMIN_LOGIN
<LI><a href="#[249817c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USER_LOGIN
</UL>

<P><STRONG><a name="[24938d4]"></a>__aeabi_idiv</STRONG> (ARM, 0 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[2493898]"></a>__aeabi_idivmod</STRONG> (ARM, 384 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[24957c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_INTEGER
<LI><a href="#[2495cb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_INTEGER
<LI><a href="#[2497f9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_OTP
</UL>

<P><STRONG><a name="[2492f74]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[2492f38]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[2492efc]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[2492830]"></a>_printf_char_common</STRONG> (Thumb, 38 bytes, Stack size 72 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2494c48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2494e28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>

<P><STRONG><a name="[2492704]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _sputc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2494e28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> noretval__2sprintf.o(.text)
</UL>
<P><STRONG><a name="[2492614]"></a>_printf_cs_common</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _printf_cs_common &rArr; _printf_str
</UL>
<BR>[Calls]<UL><LI><a href="#[2492560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_mbtowc (Weak Reference)
<LI><a href="#[2494ae0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[249259c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[24925d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[24925d8]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_char.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2492614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[249259c]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _printf_string &rArr; _printf_cs_common &rArr; _printf_str
</UL>
<BR>[Calls]<UL><LI><a href="#[2492614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[2494108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s (via Veneer)
</UL>

<P><STRONG><a name="[24923bc]"></a>__aeabi_memclr</STRONG> (ARM, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2493c1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>

<P><STRONG><a name="[2492380]"></a>__rt_memclr</STRONG> (ARM, 64 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[248fef0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[2492344]"></a>_memset</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[248ffa4]"></a>__aeabi_memclr4</STRONG> (ARM, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[248ff68]"></a>__aeabi_memclr8</STRONG> (ARM, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[248ff2c]"></a>__rt_memclr_w</STRONG> (ARM, 84 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[248fef0]"></a>_memset_w</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2492380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL>

<P><STRONG><a name="[248fc98]"></a>__user_setup_stackheap</STRONG> (ARM, 96 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[248e9d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
<LI><a href="#[24995a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
</UL>
<BR>[Called By]<UL><LI><a href="#[2490454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[248fb30]"></a>exit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[248e8e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit (via Veneer)
<LI><a href="#[248fab8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_call_atexit_fns (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[2490670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[248ea14]"></a>__user_libspace</STRONG> (ARM, 12 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[248e9d8]"></a>__user_perproc_libspace</STRONG> (ARM, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[248fc98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[248e99c]"></a>__user_perthread_libspace</STRONG> (ARM, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[248df4c]"></a>_sys_exit</STRONG> (ARM, 20 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[248dc04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[248de5c]"></a>__I$use$semihosting</STRONG> (ARM, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> sys_exit.o(.text)
</UL>
<P><STRONG><a name="[248de20]"></a>__use_no_semihosting_swi</STRONG> (ARM, 4 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[249385c]"></a>__aeabi_uidiv</STRONG> (ARM, 0 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text_udiv), UNUSED)

<P><STRONG><a name="[2493820]"></a>__aeabi_uidivmod</STRONG> (ARM, 28 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text_udiv))
<BR><BR>[Calls]<UL><LI><a href="#[2493910]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_div_large
<LI><a href="#[249394c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_div4
<LI><a href="#[2493988]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_div8
</UL>
<BR>[Called By]<UL><LI><a href="#[2497f9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_OTP
</UL>

<P><STRONG><a name="[2494c0c]"></a>__ARM_common_call_via_r1</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, __printf.o(i.__ARM_common_call_via_r1))
<BR><BR>[Called By]<UL><LI><a href="#[2494c48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[2494bd0]"></a>__ARM_common_call_via_r2</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, __printf.o(i.__ARM_common_call_via_r2))
<BR><BR>[Called By]<UL><LI><a href="#[2494ae0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[2494c48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[248e078]"></a>__fplib_config_pureend_doubles</STRONG> (ARM, 0 bytes, Stack size 0 bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[248e03c]"></a>_fp_init</STRONG> (ARM, 4 bytes, Stack size 0 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Called By]<UL><LI><a href="#[248f194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init (via Veneer)
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[24997c0]"></a>Undef_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[24997c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Undef_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[24997c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Undef_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[2499784]"></a>SWI_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[2499784]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2499784]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[2499748]"></a>PAbt_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[2499748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAbt_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2499748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAbt_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[249970c]"></a>DAbt_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[249970c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAbt_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[249970c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAbt_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[24996d0]"></a>IRQ_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[24996d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[24996d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[2499694]"></a>FIQ_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[2499694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIQ_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2499694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIQ_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[2493988]"></a>__arm_div8</STRONG> (ARM, 0 bytes, Stack size unknown bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2493820]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[249394c]"></a>__arm_div4</STRONG> (ARM, 0 bytes, Stack size unknown bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2493820]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[2493910]"></a>__arm_div_large</STRONG> (ARM, 0 bytes, Stack size unknown bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2493820]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[249286c]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[248fab8]"></a>_call_atexit_fns</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[248fb30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[2492560]"></a>_printf_mbtowc</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[2492614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[2494a68]"></a>_printf_post_padding</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[2494ae0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>

<P><STRONG><a name="[2494a2c]"></a>_printf_pre_padding</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[2494ae0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>
<HR></body></html>
