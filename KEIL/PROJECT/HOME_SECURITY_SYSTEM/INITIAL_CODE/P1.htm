<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [C:\laptop\HSSD\Vector\ARM\KEIL\PROJECT\HOME_SECURITY_SYSTEM\INITIAL_CODE\P1.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image C:\laptop\HSSD\Vector\ARM\KEIL\PROJECT\HOME_SECURITY_SYSTEM\INITIAL_CODE\P1.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, RVCT4.0 [Build 524]: Last Updated: Fri Mar 22 02:09:36 2024
<BR><P>
<H3>Maximum Stack Usage =        144 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; ADMIN_LOGIN &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[2606568]">Reset_Handler</a>
 <LI><a href="#[26065a4]">__user_initial_stackheap</a>
 <LI><a href="#[26067c0]">Undef_Handler</a>
 <LI><a href="#[2606784]">SWI_Handler</a>
 <LI><a href="#[2606748]">PAbt_Handler</a>
 <LI><a href="#[260670c]">DAbt_Handler</a>
 <LI><a href="#[26066d0]">IRQ_Handler</a>
 <LI><a href="#[2606694]">FIQ_Handler</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[26067c0]">Undef_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[26067c0]">Undef_Handler</a><BR>
 <LI><a href="#[2606784]">SWI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2606784]">SWI_Handler</a><BR>
 <LI><a href="#[2606748]">PAbt_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2606748]">PAbt_Handler</a><BR>
 <LI><a href="#[260670c]">DAbt_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[260670c]">DAbt_Handler</a><BR>
 <LI><a href="#[26066d0]">IRQ_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[26066d0]">IRQ_Handler</a><BR>
 <LI><a href="#[2606694]">FIQ_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2606694]">FIQ_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[2606568]">Reset_Handler</a>
 <LI><a href="#[26067c0]">Undef_Handler</a>
 <LI><a href="#[2606784]">SWI_Handler</a>
 <LI><a href="#[2606748]">PAbt_Handler</a>
 <LI><a href="#[260670c]">DAbt_Handler</a>
 <LI><a href="#[26066d0]">IRQ_Handler</a>
 <LI><a href="#[2606694]">FIQ_Handler</a>
 <LI><a href="#[25ff704]">__main</a>
 <LI><a href="#[260508c]">main</a>
 <LI><a href="#[25feffc]">_sputc</a>
 <LI><a href="#[25ff164]">_printf_input_char</a>
 <LI><a href="#[25faa9c]">__I$use$semihosting</a>
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[2606568]"></a>Reset_Handler</STRONG> (ARM, 0 bytes, Stack size unknown bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[25ff704]"></a>__main</STRONG> (ARM, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[25f86fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
<LI><a href="#[25ff5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[25f86fc]"></a>__scatterload</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[25ff704]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[25f86c0]"></a>__scatterload_rt2</STRONG> (ARM, 52 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[25ff5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[25f8684]"></a>__scatterload_null</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[25f84e0]"></a>__scatterload_copy</STRONG> (ARM, 40 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[25f84e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[25f84e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[25f83f0]"></a>__scatterload_zeroinit</STRONG> (ARM, 44 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[26007e4]"></a>_printf_percent</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[2601414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf (via Veneer)
</UL>

<P><STRONG><a name="[26008d4]"></a>_printf_s</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_s.o(.ARM.Collect$$_printf_percent$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = _printf_s &rArr; _printf_string &rArr; _printf_cs_common &rArr; _printf_str
</UL>
<BR>[Calls]<UL><LI><a href="#[25fee94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string (via Veneer)
</UL>

<P><STRONG><a name="[25feda4]"></a>_printf_percent_end</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[25fbdd4]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Calls]<UL><LI><a href="#[25fac7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[25fd1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li (via Veneer)
</UL>

<P><STRONG><a name="[25fe2dc]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000006))

<P><STRONG><a name="[25fe228]"></a>__rt_lib_init_rand_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_rand_2 &rArr; _rand_init &rArr; srand
</UL>
<BR>[Calls]<UL><LI><a href="#[2600550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rand_init
</UL>

<P><STRONG><a name="[25fe264]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000008))

<P><STRONG><a name="[25fdaa8]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002A))

<P><STRONG><a name="[25fdb20]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000028))

<P><STRONG><a name="[25fdee0]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[25fdd78]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[25fd9b8]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[25fda30]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[25fddf0]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[25fdd00]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[25fe138]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000D))

<P><STRONG><a name="[25fe0c0]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))

<P><STRONG><a name="[25fe048]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[25fdfd0]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[25fdf58]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[25fe1ec]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[25fd97c]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002F))

<P><STRONG><a name="[25fde68]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[25fdc88]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[25f9aac]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[25fa880]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls (via Veneer)
</UL>

<P><STRONG><a name="[25f8c60]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[25f8a80]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[25f8a44]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[25f8bac]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[25f8d14]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000003))

<P><STRONG><a name="[25f8b34]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000B))

<P><STRONG><a name="[25ff5d8]"></a>__rt_entry</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[25f86c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
<LI><a href="#[25ff704]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[25fd274]"></a>__rt_entry_presh_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[25fcef0]"></a>__rt_entry_sh</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[25fc8d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[25fd1c0]"></a>__rt_entry_li</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[25fbdd4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init (via Veneer)
</UL>

<P><STRONG><a name="[25fd1fc]"></a>__rt_entry_postsh_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[25fd10c]"></a>__rt_entry_main</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Calls]<UL><LI><a href="#[25fc770]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit (via BX)
</UL>

<P><STRONG><a name="[25fd148]"></a>__rt_entry_postli_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[25fb528]"></a>__rt_exit</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[25fc770]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit (via Veneer)
</UL>

<P><STRONG><a name="[25fa880]"></a>__rt_exit_ls</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[25f9aac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown (via Veneer)
</UL>

<P><STRONG><a name="[25fa8bc]"></a>__rt_exit_prels_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[25fa844]"></a>__rt_exit_exit</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[25fab8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[26065a4]"></a>__user_initial_stackheap</STRONG> (ARM, 0 bytes, Stack size unknown bytes, startup.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[25fc8d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[2605104]"></a>USER_LOGIN</STRONG> (ARM, 412 bytes, Stack size 8 bytes, p1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = USER_LOGIN &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[26003e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[26015f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf (via Veneer)
<LI><a href="#[2604b64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_milli
<LI><a href="#[2604c90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_STR
<LI><a href="#[2604d08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NUM_KEY
<LI><a href="#[2604d44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_STR
<LI><a href="#[2604dbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_COMMAND
<LI><a href="#[2604ee8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EEPROM_PAGE_READ
<LI><a href="#[2604f24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_SMS
<LI><a href="#[2604f60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_OTP
<LI><a href="#[2604f9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DOOR_OPEN
<LI><a href="#[2604fd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DOOR_IDLE
<LI><a href="#[2605014]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DOOR_CLOSE
<LI><a href="#[2605050]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ALPHA_KEY
</UL>
<BR>[Called By]<UL><LI><a href="#[260508c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[26050c8]"></a>ADMIN_LOGIN</STRONG> (ARM, 684 bytes, Stack size 8 bytes, p1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = ADMIN_LOGIN &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[26003e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[26015f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf (via Veneer)
<LI><a href="#[2604b64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_milli
<LI><a href="#[2604c90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_STR
<LI><a href="#[2604d08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NUM_KEY
<LI><a href="#[2604d44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_STR
<LI><a href="#[2604dbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_COMMAND
<LI><a href="#[2604ee8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EEPROM_PAGE_READ
<LI><a href="#[2604f24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_SMS
<LI><a href="#[2604f60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_OTP
<LI><a href="#[2604f9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DOOR_OPEN
<LI><a href="#[2604fd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DOOR_IDLE
<LI><a href="#[2605014]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DOOR_CLOSE
<LI><a href="#[2605050]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ALPHA_KEY
</UL>
<BR>[Called By]<UL><LI><a href="#[260508c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[260508c]"></a>main</STRONG> (ARM, 412 bytes, Stack size 8 bytes, p1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = main &rArr; ADMIN_LOGIN &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2604b28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
<LI><a href="#[2604b64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_milli
<LI><a href="#[2604c90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_STR
<LI><a href="#[2604ccc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_INIT
<LI><a href="#[2604d44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_STR
<LI><a href="#[2604d80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_INIT
<LI><a href="#[2604dbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_COMMAND
<LI><a href="#[2604df8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L293D_INIT
<LI><a href="#[2604e34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEYPAD_INIT
<LI><a href="#[2604e70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_INIT
<LI><a href="#[2604eac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EEPROM_PAGE_WRITE
<LI><a href="#[2604ee8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EEPROM_PAGE_READ
<LI><a href="#[2604fd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DOOR_IDLE
<LI><a href="#[26050c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADMIN_LOGIN
<LI><a href="#[2605104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USER_LOGIN
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtentry2.o(.ARM.Collect$$rtentry$$0000000D)
</UL>
<P><STRONG><a name="[2604e70]"></a>I2C_INIT</STRONG> (ARM, 48 bytes, Stack size 0 bytes, i2c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[260508c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2604600]"></a>I2C_START</STRONG> (ARM, 52 bytes, Stack size 0 bytes, i2c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2603e80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EEPROM_READ
<LI><a href="#[2603ebc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EEPROM_WRITE
<LI><a href="#[2604eac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EEPROM_PAGE_WRITE
<LI><a href="#[2604ee8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EEPROM_PAGE_READ
</UL>

<P><STRONG><a name="[26045c4]"></a>I2C_RESTART</STRONG> (ARM, 60 bytes, Stack size 0 bytes, i2c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2603e80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EEPROM_READ
<LI><a href="#[2604ee8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EEPROM_PAGE_READ
</UL>

<P><STRONG><a name="[2604588]"></a>I2C_STOP</STRONG> (ARM, 24 bytes, Stack size 0 bytes, i2c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2603e80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EEPROM_READ
<LI><a href="#[2603ebc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EEPROM_WRITE
<LI><a href="#[2604eac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EEPROM_PAGE_WRITE
<LI><a href="#[2604ee8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EEPROM_PAGE_READ
</UL>

<P><STRONG><a name="[260454c]"></a>I2C_WRITE</STRONG> (ARM, 48 bytes, Stack size 0 bytes, i2c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2603e80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EEPROM_READ
<LI><a href="#[2603ebc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EEPROM_WRITE
<LI><a href="#[2604eac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EEPROM_PAGE_WRITE
<LI><a href="#[2604ee8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EEPROM_PAGE_READ
</UL>

<P><STRONG><a name="[2604510]"></a>I2C_NACK</STRONG> (ARM, 56 bytes, Stack size 0 bytes, i2c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2603e80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EEPROM_READ
<LI><a href="#[2604ee8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EEPROM_PAGE_READ
</UL>

<P><STRONG><a name="[26044d4]"></a>I2C_MASTERACK</STRONG> (ARM, 68 bytes, Stack size 0 bytes, i2c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2604ee8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EEPROM_PAGE_READ
</UL>

<P><STRONG><a name="[2603ebc]"></a>I2C_EEPROM_WRITE</STRONG> (ARM, 64 bytes, Stack size 16 bytes, i2c_eeprom.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[260454c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WRITE
<LI><a href="#[2604588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_STOP
<LI><a href="#[2604600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_START
</UL>

<P><STRONG><a name="[2603e80]"></a>I2C_EEPROM_READ</STRONG> (ARM, 84 bytes, Stack size 16 bytes, i2c_eeprom.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2604510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_NACK
<LI><a href="#[260454c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WRITE
<LI><a href="#[2604588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_STOP
<LI><a href="#[26045c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RESTART
<LI><a href="#[2604600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_START
</UL>

<P><STRONG><a name="[2604eac]"></a>I2C_EEPROM_PAGE_WRITE</STRONG> (ARM, 92 bytes, Stack size 24 bytes, i2c_eeprom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = I2C_EEPROM_PAGE_WRITE
</UL>
<BR>[Calls]<UL><LI><a href="#[260454c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WRITE
<LI><a href="#[2604588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_STOP
<LI><a href="#[2604600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_START
</UL>
<BR>[Called By]<UL><LI><a href="#[260508c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2604ee8]"></a>I2C_EEPROM_PAGE_READ</STRONG> (ARM, 124 bytes, Stack size 24 bytes, i2c_eeprom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = I2C_EEPROM_PAGE_READ
</UL>
<BR>[Calls]<UL><LI><a href="#[26044d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MASTERACK
<LI><a href="#[2604510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_NACK
<LI><a href="#[260454c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WRITE
<LI><a href="#[2604588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_STOP
<LI><a href="#[26045c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RESTART
<LI><a href="#[2604600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_START
</UL>
<BR>[Called By]<UL><LI><a href="#[260508c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[26050c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADMIN_LOGIN
<LI><a href="#[2605104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USER_LOGIN
</UL>

<P><STRONG><a name="[2604ccc]"></a>UART0_INIT</STRONG> (ARM, 52 bytes, Stack size 0 bytes, uart0.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[260508c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[260391c]"></a>UART0_TX</STRONG> (ARM, 36 bytes, Stack size 0 bytes, uart0.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[26038a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_INTEGER
<LI><a href="#[2604c90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_STR
<LI><a href="#[2604f24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_SMS
</UL>

<P><STRONG><a name="[26038e0]"></a>UART0_RX</STRONG> (ARM, 32 bytes, Stack size 0 bytes, uart0.o(.text), UNUSED)

<P><STRONG><a name="[2604c90]"></a>UART0_STR</STRONG> (ARM, 40 bytes, Stack size 4 bytes, uart0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = UART0_STR
</UL>
<BR>[Calls]<UL><LI><a href="#[260391c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_TX
</UL>
<BR>[Called By]<UL><LI><a href="#[2604f24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_SMS
<LI><a href="#[260508c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[26050c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADMIN_LOGIN
<LI><a href="#[2605104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USER_LOGIN
</UL>

<P><STRONG><a name="[26038a4]"></a>UART0_INTEGER</STRONG> (ARM, 136 bytes, Stack size 24 bytes, uart0.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2600190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[260391c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_TX
</UL>

<P><STRONG><a name="[2604dbc]"></a>LCD_COMMAND</STRONG> (ARM, 132 bytes, Stack size 8 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LCD_COMMAND
</UL>
<BR>[Calls]<UL><LI><a href="#[2604b64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_milli
</UL>
<BR>[Called By]<UL><LI><a href="#[260328c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SCROLL
<LI><a href="#[2604d08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NUM_KEY
<LI><a href="#[2604d80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_INIT
<LI><a href="#[2605050]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ALPHA_KEY
<LI><a href="#[260508c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[26050c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADMIN_LOGIN
<LI><a href="#[2605104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USER_LOGIN
</UL>

<P><STRONG><a name="[2604d80]"></a>LCD_INIT</STRONG> (ARM, 72 bytes, Stack size 8 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LCD_INIT &rArr; LCD_COMMAND
</UL>
<BR>[Calls]<UL><LI><a href="#[2604dbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_COMMAND
</UL>
<BR>[Called By]<UL><LI><a href="#[260508c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2603304]"></a>LCD_DATA</STRONG> (ARM, 132 bytes, Stack size 8 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LCD_DATA
</UL>
<BR>[Calls]<UL><LI><a href="#[2604b64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_milli
</UL>
<BR>[Called By]<UL><LI><a href="#[260328c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SCROLL
<LI><a href="#[26032c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_INTEGER
<LI><a href="#[2604d08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NUM_KEY
<LI><a href="#[2604d44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_STR
<LI><a href="#[2605050]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ALPHA_KEY
</UL>

<P><STRONG><a name="[26032c8]"></a>LCD_INTEGER</STRONG> (ARM, 136 bytes, Stack size 24 bytes, lcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2600190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[2603304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DATA
</UL>

<P><STRONG><a name="[2604d44]"></a>LCD_STR</STRONG> (ARM, 40 bytes, Stack size 8 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LCD_STR &rArr; LCD_DATA
</UL>
<BR>[Calls]<UL><LI><a href="#[2603304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DATA
</UL>
<BR>[Called By]<UL><LI><a href="#[2604d08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NUM_KEY
<LI><a href="#[2605050]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ALPHA_KEY
<LI><a href="#[260508c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[26050c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADMIN_LOGIN
<LI><a href="#[2605104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USER_LOGIN
</UL>

<P><STRONG><a name="[260328c]"></a>LCD_SCROLL</STRONG> (ARM, 136 bytes, Stack size 32 bytes, lcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2603304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DATA
<LI><a href="#[2604dbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_COMMAND
</UL>

<P><STRONG><a name="[2604b28]"></a>millis</STRONG> (ARM, 32 bytes, Stack size 0 bytes, delay.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2604d08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NUM_KEY
<LI><a href="#[2605050]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ALPHA_KEY
<LI><a href="#[260508c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2602f08]"></a>delay_micro</STRONG> (ARM, 64 bytes, Stack size 0 bytes, delay.o(.text), UNUSED)

<P><STRONG><a name="[2604b64]"></a>delay_milli</STRONG> (ARM, 64 bytes, Stack size 0 bytes, delay.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2603304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DATA
<LI><a href="#[2604d08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NUM_KEY
<LI><a href="#[2604dbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_COMMAND
<LI><a href="#[2604f24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_SMS
<LI><a href="#[2605050]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ALPHA_KEY
<LI><a href="#[260508c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[26050c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADMIN_LOGIN
<LI><a href="#[2605104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USER_LOGIN
</UL>

<P><STRONG><a name="[2602ecc]"></a>delay_sec</STRONG> (ARM, 64 bytes, Stack size 0 bytes, delay.o(.text), UNUSED)

<P><STRONG><a name="[2604f24]"></a>GSM_SMS</STRONG> (ARM, 120 bytes, Stack size 8 bytes, gsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GSM_SMS &rArr; UART0_STR
</UL>
<BR>[Calls]<UL><LI><a href="#[260391c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_TX
<LI><a href="#[2604b64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_milli
<LI><a href="#[2604c90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_STR
</UL>
<BR>[Called By]<UL><LI><a href="#[26050c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADMIN_LOGIN
<LI><a href="#[2605104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USER_LOGIN
</UL>

<P><STRONG><a name="[2604f60]"></a>GSM_OTP</STRONG> (ARM, 112 bytes, Stack size 24 bytes, gsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36 + Unknown Stack Size
<LI>Call Chain = GSM_OTP &rArr; rand
</UL>
<BR>[Calls]<UL><LI><a href="#[2600118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[2600190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[2600514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand (via Veneer)
<LI><a href="#[260058c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[26050c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADMIN_LOGIN
<LI><a href="#[2605104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USER_LOGIN
</UL>

<P><STRONG><a name="[2604e34]"></a>KEYPAD_INIT</STRONG> (ARM, 68 bytes, Stack size 0 bytes, whole_keypad.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[260508c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[26021e8]"></a>keypad</STRONG> (ARM, 124 bytes, Stack size 0 bytes, whole_keypad.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2604d08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NUM_KEY
<LI><a href="#[2605050]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ALPHA_KEY
</UL>

<P><STRONG><a name="[2605050]"></a>ALPHA_KEY</STRONG> (ARM, 756 bytes, Stack size 56 bytes, whole_keypad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ALPHA_KEY &rArr; LCD_STR &rArr; LCD_DATA
</UL>
<BR>[Calls]<UL><LI><a href="#[26021e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keypad
<LI><a href="#[2603304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DATA
<LI><a href="#[2604b28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
<LI><a href="#[2604b64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_milli
<LI><a href="#[2604d44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_STR
<LI><a href="#[2604dbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_COMMAND
</UL>
<BR>[Called By]<UL><LI><a href="#[26050c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADMIN_LOGIN
<LI><a href="#[2605104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USER_LOGIN
</UL>

<P><STRONG><a name="[2604d08]"></a>NUM_KEY</STRONG> (ARM, 520 bytes, Stack size 40 bytes, whole_keypad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = NUM_KEY &rArr; LCD_STR &rArr; LCD_DATA
</UL>
<BR>[Calls]<UL><LI><a href="#[26021e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keypad
<LI><a href="#[2603304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DATA
<LI><a href="#[2604b28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
<LI><a href="#[2604b64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_milli
<LI><a href="#[2604d44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_STR
<LI><a href="#[2604dbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_COMMAND
</UL>
<BR>[Called By]<UL><LI><a href="#[26050c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADMIN_LOGIN
<LI><a href="#[2605104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USER_LOGIN
</UL>

<P><STRONG><a name="[2604df8]"></a>L293D_INIT</STRONG> (ARM, 24 bytes, Stack size 0 bytes, l293d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[260508c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2604f9c]"></a>DOOR_OPEN</STRONG> (ARM, 32 bytes, Stack size 0 bytes, l293d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[26050c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADMIN_LOGIN
<LI><a href="#[2605104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USER_LOGIN
</UL>

<P><STRONG><a name="[2605014]"></a>DOOR_CLOSE</STRONG> (ARM, 32 bytes, Stack size 0 bytes, l293d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[26050c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADMIN_LOGIN
<LI><a href="#[2605104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USER_LOGIN
</UL>

<P><STRONG><a name="[2604fd8]"></a>DOOR_IDLE</STRONG> (ARM, 32 bytes, Stack size 0 bytes, l293d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[260508c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[26050c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADMIN_LOGIN
<LI><a href="#[2605104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USER_LOGIN
</UL>

<P><STRONG><a name="[26015f4]"></a>__2sprintf</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, noretval__2sprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[25feffc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[25ff128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[26050c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADMIN_LOGIN (via Veneer)
<LI><a href="#[2605104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USER_LOGIN (via Veneer)
</UL>

<P><STRONG><a name="[2601414]"></a>__printf</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, __printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[26007e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent (via Veneer)
<LI><a href="#[260139c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_call_via_r2
<LI><a href="#[26013d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_call_via_r1
</UL>
<BR>[Called By]<UL><LI><a href="#[25ff128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[26012ac]"></a>_printf_str</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, _printf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_str
</UL>
<BR>[Calls]<UL><LI><a href="#[26011f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding (Weak Reference)
<LI><a href="#[2601234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding (Weak Reference)
<LI><a href="#[260139c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_call_via_r2
</UL>
<BR>[Called By]<UL><LI><a href="#[25fef0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[260058c]"></a>srand</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, rand.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = srand
</UL>
<BR>[Called By]<UL><LI><a href="#[2600550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rand_init
<LI><a href="#[2604f60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_OTP (via Veneer)
</UL>

<P><STRONG><a name="[2600550]"></a>_rand_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rand.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _rand_init &rArr; srand
</UL>
<BR>[Calls]<UL><LI><a href="#[260058c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand
</UL>
<BR>[Called By]<UL><LI><a href="#[25fe228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_rand_2
</UL>

<P><STRONG><a name="[2600514]"></a>rand</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, rand.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = rand
</UL>
<BR>[Called By]<UL><LI><a href="#[2604f60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_OTP (via Veneer)
</UL>

<P><STRONG><a name="[26003e8]"></a>strcmp</STRONG> (ARM, 156 bytes, Stack size 4 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[26050c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADMIN_LOGIN
<LI><a href="#[2605104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USER_LOGIN
</UL>

<P><STRONG><a name="[26001cc]"></a>__aeabi_idiv</STRONG> (ARM, 0 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[2600190]"></a>__aeabi_idivmod</STRONG> (ARM, 384 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[26032c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_INTEGER
<LI><a href="#[26038a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_INTEGER
<LI><a href="#[2604f60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_OTP
</UL>

<P><STRONG><a name="[25ff86c]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[25ff830]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[25ff7f4]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[25ff128]"></a>_printf_char_common</STRONG> (Thumb, 38 bytes, Stack size 72 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2601414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[26015f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>

<P><STRONG><a name="[25feffc]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _sputc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[26015f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> noretval__2sprintf.o(.text)
</UL>
<P><STRONG><a name="[25fef0c]"></a>_printf_cs_common</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _printf_cs_common &rArr; _printf_str
</UL>
<BR>[Calls]<UL><LI><a href="#[25fee58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_mbtowc (Weak Reference)
<LI><a href="#[26012ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[25fee94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[25feed0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[25feed0]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_char.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[25fef0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[25fee94]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _printf_string &rArr; _printf_cs_common &rArr; _printf_str
</UL>
<BR>[Calls]<UL><LI><a href="#[25fef0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[26008d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s (via Veneer)
</UL>

<P><STRONG><a name="[25fc8d8]"></a>__user_setup_stackheap</STRONG> (ARM, 96 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[25fb618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
<LI><a href="#[26065a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
</UL>
<BR>[Called By]<UL><LI><a href="#[25fcef0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[25fc770]"></a>exit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[25fb528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit (via Veneer)
<LI><a href="#[25fc6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_call_atexit_fns (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[25fd10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[25fb654]"></a>__user_libspace</STRONG> (ARM, 12 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[25fb618]"></a>__user_perproc_libspace</STRONG> (ARM, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[25fc8d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[25fb5dc]"></a>__user_perthread_libspace</STRONG> (ARM, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[25fab8c]"></a>_sys_exit</STRONG> (ARM, 20 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[25fa844]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[25faa9c]"></a>__I$use$semihosting</STRONG> (ARM, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> sys_exit.o(.text)
</UL>
<P><STRONG><a name="[25faa60]"></a>__use_no_semihosting_swi</STRONG> (ARM, 4 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[2600154]"></a>__aeabi_uidiv</STRONG> (ARM, 0 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text_udiv), UNUSED)

<P><STRONG><a name="[2600118]"></a>__aeabi_uidivmod</STRONG> (ARM, 28 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text_udiv))
<BR><BR>[Calls]<UL><LI><a href="#[2600208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_div_large
<LI><a href="#[2600244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_div4
<LI><a href="#[2600280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_div8
</UL>
<BR>[Called By]<UL><LI><a href="#[2604f60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_OTP
</UL>

<P><STRONG><a name="[26013d8]"></a>__ARM_common_call_via_r1</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, __printf.o(i.__ARM_common_call_via_r1))
<BR><BR>[Called By]<UL><LI><a href="#[2601414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[260139c]"></a>__ARM_common_call_via_r2</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, __printf.o(i.__ARM_common_call_via_r2))
<BR><BR>[Called By]<UL><LI><a href="#[26012ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[2601414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[25facb8]"></a>__fplib_config_pureend_doubles</STRONG> (ARM, 0 bytes, Stack size 0 bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[25fac7c]"></a>_fp_init</STRONG> (ARM, 4 bytes, Stack size 0 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Called By]<UL><LI><a href="#[25fbdd4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init (via Veneer)
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[26067c0]"></a>Undef_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[26067c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Undef_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[26067c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Undef_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[2606784]"></a>SWI_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[2606784]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2606784]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[2606748]"></a>PAbt_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[2606748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAbt_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2606748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAbt_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[260670c]"></a>DAbt_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[260670c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAbt_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[260670c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAbt_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[26066d0]"></a>IRQ_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[26066d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[26066d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[2606694]"></a>FIQ_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[2606694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIQ_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2606694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIQ_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[2600280]"></a>__arm_div8</STRONG> (ARM, 0 bytes, Stack size unknown bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2600118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[2600244]"></a>__arm_div4</STRONG> (ARM, 0 bytes, Stack size unknown bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2600118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[2600208]"></a>__arm_div_large</STRONG> (ARM, 0 bytes, Stack size unknown bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2600118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[25ff164]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[25fc6f8]"></a>_call_atexit_fns</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[25fc770]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[25fee58]"></a>_printf_mbtowc</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[25fef0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[2601234]"></a>_printf_post_padding</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[26012ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>

<P><STRONG><a name="[26011f8]"></a>_printf_pre_padding</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[26012ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>
<HR></body></html>
